#include "msp430.h"                             ; #define controlled include file
        NAME    main                            ; module name
        
        PUBLIC  main                            ; make the main label visible
                                                ; outside this module
                                                
        ORG     0FFFEh
        DC16    init                            ; set reset vector to 'init' label
        
        RSEG    DATA16_I
        
//LISTA   DS      100
LISTA  DB      8,2,3,1,9,7,4

        RSEG    CSTACK                          ; pre-declaration of segment
        RSEG    CODE                            ; place program in 'CODE' segment
        
init:   MOV     #SFE(CSTACK), SP                ; set up stack

main:   NOP                                     ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL          ; Stop watchdog timer
        CALL    #CONFIG_DISPLAY
INICIO        
        MOV.B   #7,R8                           ; Define o TAM
        CALL    #BOLHA                          ; Chama a sub-rotina
        CLR.B   R5                              ; Limpa o Indice 1
PULA        
        MOV.B   LISTA(R5),R4                    ; Move o primeiro elemento da lista para o display
        CALL    #MOSTRA_DISPLAY                 ; Mostra valor no display
        CALL    #TEMPO                          ; Aguarda tempo de exibição
        CALL    #TEMPO
        CALL    #TEMPO
        CALL    #TEMPO
        DEC.B   R8                              ; Decrementa o TAM
        CMP.B   #0,R8                           ; Compara se o TAM é igual a zero
        JEQ     FINAL                           ; Se sim, pula para o final
        INC.B   R5                              ; Se não, incrementa o Indice 1
        JMP     PULA                            ; e volta para mostrar o próximo elemento
FINAL
        JMP     INICIO                          ; Volta para o início
/*------------------------------------------------------------------------------
;NOME: BOLHA
;DESCRICAO: Coloca a Lista em ordem crescente
;ENTRADA: R8 (TAM)
;SAIDA:-
;-----------------------------------------------------------------------------*/
BOLHA
        PUSH    R5                              ; Salva contexto
        PUSH    R6
        PUSH    R7
        PUSH    R8
        PUSH    R10
COMECA
        CLR.B   R5                             ; Limpa o Indice 1
        MOV.B   #1,R6                          ; Move 1 no Indice 2
        CLR.B   R7                             ; Limpa o Troca
COMPARA
        CMP.B   LISTA(R5),LISTA(R6)            ; Compara o primeiro elemento da lista com o segundo
        JHS     TAMANHO                        ; Se não for maior, pula para Tamanho
        MOV.B   LISTA(R6),R10                  ; Se for, move o segundo elemento para o Muda
        MOV.B   LISTA(R5),LISTA(R6)            ; Move o primeiro elemento para o segundo da lista
        MOV.B   R10,LISTA(R5)                  ; Move o Muda para o primeiro elemento da lista
        INC.B   R7                             ; Incrementa o Troca
TAMANHO
        CMP.B   R6,R8                          ; Compara o Indice 2 com o TAM
        JEQ     TROCA                          ; Se for igual, pula para o Troca
        INC.B   R5                             ; Se não, incrementa o Indice 1
        INC.B   R6                             ; e o Indice 2
        JMP     COMPARA                        ; E volta para o compara
TROCA
        CMP.B   #0,R7                          ; Compara se o Troca é igual a zero
        JEQ     FIM                            ; Se for, pula para o fim
        JMP     COMECA                         ; Se não, volta para o começo
FIM
        POP     R10
        POP     R8
        POP     R7
        POP     R6
        POP     R5

        RET
/*------------------------------------------------------------------------------
;NOME: CONFIG_DISPLAY
;DESCRICAO: Configura as portas P1 e P2 do msp430 como saídas
;ENTRADA: -
;SAIDA: -
;-----------------------------------------------------------------------------*/
CONFIG_DISPLAY
        MOV.B   #0XFF,P1DIR                     ;Configura P1 e P2 como saídas
        MOV.B   #0XFF,P2DIR
        BIC.B   #0XC0,P2SEL                     ;Configura os bits P2.6 e P2.7 como I/O
        CLR.B   P1OUT                           ;Limpa as portas
        CLR.B   P2OUT
        RET
/*------------------------------------------------------------------------------
;NOME: MOSTRA_DISPLAY
;DESCRIÇÃO: Apresenta em dois displays de 7 segmentos o valor da dezena e da
unidade, e qualquer número de 2 dígitos decimal.
;ENTRADA: R4 - Número em hexadecimal que será mostrado no display
;SAIDA:
;-----------------------------------------------------------------------------*/
MOSTRA_DISPLAY
        PUSH    R5                              ;Salva contexto
        PUSH    R6
        
        MOV.B   R4,R5                           ;Carrega a unidade
        CLR.B   R6                              ;Zera a dezena
CONT    CMP.B   #10,R5                          ;Se Número > 10
        JL      MOSTRA
        SUB.B   #10,R5                          ;Retira uma dezena do valor
        INC.B   R6                              ;Incrementa dezena
        JMP     CONT
MOSTRA  MOV.B   COD(R5),P1OUT                   ;Mostra unidade
        MOV.B   COD(R6),P2OUT                   ;Mostra dezena
        
        POP     R6                              ;Restaura contexto
        POP     R5
        RET
/*------------------------------------------------------------------------------
;NOME: TEMPO
;DESCRICAO: Faz uma contagem de 0 a 65535.
;ENTRADA: -
;SAIDA: -
;-----------------------------------------------------------------------------*/
TEMPO
        PUSH    R4                              ;Salva contexto
        MOV     #0xFFFF,R4
CONTA   DEC     R4
        JNZ     CONTA
        POP     R4                              ;Restaura contexto
        RET
// Carrega o vetor que faz a conversão BCD / 7 Segmentos
// 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9
COD     DB      0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F
;-----------------------------------------------------------------------------*/
END