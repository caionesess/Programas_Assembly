#include "msp430.h"                             ; #define controlled include file
        NAME    main                            ; module name
        
        PUBLIC  main                            ; make the main label visible
                                                ; outside this module
                                                
        ORG     0FFFEh
        DC16    init                            ; set reset vector to 'init' label
        
        RSEG    DATA16_I
        
//LISTA1   DS      100
LISTA1  DB      0,1,2,3,4,5
//LISTA2   DS      106
LISTA2  DB      6,7,8,9,10,11

        RSEG    CSTACK                          ; pre-declaration of segment
        RSEG    CODE                            ; place program in 'CODE' segment
        
init:   MOV     #SFE(CSTACK), SP                ; set up stack

main:   NOP                                     ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL          ; Stop watchdog timer
        CALL    #CONFIG_DISPLAY
INICIO        
        MOV.B   #6,R8                           ; Define o limite
        CALL    #TROCA                          ; Chama a sub-rotina
        CLR.B   R5                              ; Zera o índice
        CLR.B   R9                              ; Zera o Trocas
COMECA        
        MOV.B   LISTA1(R5),R4                   ; Move o elemento da lista 1 para o display
        CALL    #MOSTRA_DISPLAY                 ; Mostra valor no display
        CALL    #TEMPO                          ; Aguarda tempo de exibição
        CALL    #TEMPO
        CALL    #TEMPO
        CALL    #TEMPO
        INC.B   R9                              ; Incrementa o Trocas
        CMP.B   R9,R8                           ; Compara se o Trocas é igual ao limite
        JEQ     LIMPA                           ; Se sim, vai para a próxima lista
        INC     R5                              ; Se não, incrementa o índice
        JMP     COMECA                          ; e repete o processo
LIMPA   
        CLR.B   R5                              ; Zera o índice e o Trocas antes de mostrar a próxima lista
        CLR.B   R9
OUTRA 
        MOV.B   LISTA2(R5),R4                   ; Move o elemento da lista 2 para o display
        CALL    #MOSTRA_DISPLAY                 ; Mostra valor no display
        CALL    #TEMPO                          ; Aguarda tempo de exibição
        CALL    #TEMPO
        CALL    #TEMPO
        CALL    #TEMPO
        INC.B   R9
        CMP.B   R9,R8                           ; Compara se o Trocas é igual ao limite
        JEQ     FINAL                           ; Se sim, encaminha para o fim
        INC     R5                              ; Se não, incrementa o índice
        JMP     OUTRA                           ; e repete o processo
FINAL
        JMP     $
/*------------------------------------------------------------------------------
;NOME: TROCA
;DESCRICAO: Troca os conteúdos das listas
;ENTRADA: R8 (limite)
;SAIDA: -
;-----------------------------------------------------------------------------*/
TROCA
        PUSH    R5                              ; Salvamento de contexto
        PUSH    R9
        PUSH    R10
        PUSH    R11
        CLR.B   R5                              ; Zera o índice
        CLR.B   R9                              ; Zera o Troca
TROCAR
        MOV.B   LISTA1(R5),R10                  ; Move o primeiro elemento da lista 1 para o Recebe
        MOV.B   LISTA2(R5),R11                  ; Move o primeiro elemento da lista 2 para o Recebeu
        MOV.B   R11,LISTA1(R5)                  ; Move o elemento que estava na lista 2 para a lista 1
        MOV.B   R10,LISTA2(R5)                  ; Move o elemento que estava na lista 1 para a lista 2
        INC.B   R9                              ; Incrementa o Trocas
        CMP.B   R9,R8                           ; Compara se o Trocas é igual ao limite
        JEQ     FIM                             ; Se sim, encaminha para o fim
        INC     R5                              ; Se não, incrementa o índice
        JMP     TROCAR                          ; e repete o processo
FIM
        POP     R11
        POP     R10
        POP     R9
        POP     R5
        RET
/*------------------------------------------------------------------------------
;NOME: CONFIG_DISPLAY
;DESCRICAO: Configura as portas P1 e P2 do msp430 como saídas
;ENTRADA: -
;SAIDA: -
;-----------------------------------------------------------------------------*/
CONFIG_DISPLAY
        MOV.B   #0XFF,P1DIR                     ;Configura P1 e P2 como saídas
        MOV.B   #0XFF,P2DIR
        BIC.B   #0XC0,P2SEL                     ;Configura os bits P2.6 e P2.7 como I/O
        CLR.B   P1OUT                           ;Limpa as portas
        CLR.B   P2OUT
        RET
/*------------------------------------------------------------------------------
;NOME: MOSTRA_DISPLAY
;DESCRIÇÃO: Apresenta em dois displays de 7 segmentos o valor da dezena e da
unidade, e qualquer número de 2 dígitos decimal.
;ENTRADA: R4 - Número em hexadecimal que será mostrado no display
;SAIDA:
;-----------------------------------------------------------------------------*/
MOSTRA_DISPLAY
        PUSH    R5                              ;Salva contexto
        PUSH    R6
        
        MOV.B   R4,R5                           ;Carrega a unidade
        CLR.B   R6                              ;Zera a dezena
CONT    CMP.B   #10,R5                          ;Se Número > 10
        JL      MOSTRA
        SUB.B   #10,R5                          ;Retira uma dezena do valor
        INC.B   R6                              ;Incrementa dezena
        JMP     CONT
MOSTRA  MOV.B   COD(R5),P1OUT                   ;Mostra unidade
        MOV.B   COD(R6),P2OUT                   ;Mostra dezena
        
        POP     R6                              ;Restaura contexto
        POP     R5
        RET
/*------------------------------------------------------------------------------
;NOME: TEMPO
;DESCRICAO: Faz uma contagem de 0 a 65535.
;ENTRADA: -
;SAIDA: -
;-----------------------------------------------------------------------------*/
TEMPO
        PUSH    R4                              ;Salva contexto
        MOV     #0xFFFF,R4
CONTA   DEC     R4
        JNZ     CONTA
        POP     R4                              ;Restaura contexto
        RET
// Carrega o vetor que faz a conversão BCD / 7 Segmentos
// 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9
COD     DB      0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F
;-----------------------------------------------------------------------------*/
END
        